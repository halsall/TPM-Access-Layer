// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_CommandType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_DeviceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_RegisterType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_BoardMake_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_RegisterInfoType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_RegisterInfoType_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_SPIInfoType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_SPIInfoType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Reply_ResultType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Reply_TpmStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Reply_PermissionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Reply_DeviceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Reply_RegisterType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, registername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, registerfamily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, board_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_CommandType_descriptor_ = Request_descriptor_->enum_type(0);
  Request_DeviceType_descriptor_ = Request_descriptor_->enum_type(1);
  Request_RegisterType_descriptor_ = Request_descriptor_->enum_type(2);
  Request_BoardMake_descriptor_ = Request_descriptor_->enum_type(3);
  Reply_descriptor_ = file->message_type(1);
  static const int Reply_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, permission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, registerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, firmware_),
  };
  Reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_descriptor_,
      Reply::default_instance_,
      Reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply));
  Reply_RegisterInfoType_descriptor_ = Reply_descriptor_->nested_type(0);
  static const int Reply_RegisterInfoType_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_RegisterInfoType, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_RegisterInfoType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_RegisterInfoType, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_RegisterInfoType, permission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_RegisterInfoType, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_RegisterInfoType, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_RegisterInfoType, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_RegisterInfoType, bits_),
  };
  Reply_RegisterInfoType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_RegisterInfoType_descriptor_,
      Reply_RegisterInfoType::default_instance_,
      Reply_RegisterInfoType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_RegisterInfoType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_RegisterInfoType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply_RegisterInfoType));
  Reply_SPIInfoType_descriptor_ = Reply_descriptor_->nested_type(1);
  static const int Reply_SPIInfoType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_SPIInfoType, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_SPIInfoType, spi_sclk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_SPIInfoType, spi_en_),
  };
  Reply_SPIInfoType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_SPIInfoType_descriptor_,
      Reply_SPIInfoType::default_instance_,
      Reply_SPIInfoType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_SPIInfoType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_SPIInfoType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply_SPIInfoType));
  Reply_ResultType_descriptor_ = Reply_descriptor_->enum_type(0);
  Reply_TpmStatus_descriptor_ = Reply_descriptor_->enum_type(1);
  Reply_PermissionType_descriptor_ = Reply_descriptor_->enum_type(2);
  Reply_DeviceType_descriptor_ = Reply_descriptor_->enum_type(3);
  Reply_RegisterType_descriptor_ = Reply_descriptor_->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_descriptor_, &Reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_RegisterInfoType_descriptor_, &Reply_RegisterInfoType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_SPIInfoType_descriptor_, &Reply_SPIInfoType::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Reply::default_instance_;
  delete Reply_reflection_;
  delete Reply_RegisterInfoType::default_instance_;
  delete Reply_RegisterInfoType_reflection_;
  delete Reply_SPIInfoType::default_instance_;
  delete Reply_SPIInfoType_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\"\334\005\n\007Request\022%\n\007command\030\001"
    " \002(\0162\024.Request.CommandType\022\n\n\002ip\030\002 \001(\t\022\014"
    "\n\004port\030\003 \001(\005\022\n\n\002id\030\004 \001(\005\022\024\n\014registerName"
    "\030\006 \001(\t\022-\n\016registerFamily\030\007 \001(\0162\025.Request"
    ".RegisterType\022#\n\006device\030\010 \001(\0162\023.Request."
    "DeviceType\022\t\n\001n\030\t \001(\r\022\014\n\004file\030\n \001(\t\022\r\n\005v"
    "alue\030\013 \001(\r\022\016\n\006values\030\014 \003(\r\022!\n\005board\030\r \001("
    "\0162\022.Request.BoardMake\"\363\001\n\013CommandType\022\013\n"
    "\007CONNECT\020\001\022\016\n\nDISCONNECT\020\002\022\017\n\013RESET_BOAR"
    "D\020\003\022\016\n\nGET_STATUS\020\004\022\025\n\021GET_REGISTER_LIST"
    "\020\005\022\026\n\022GET_REGISTER_VALUE\020\006\022\026\n\022SET_REGIST"
    "ER_VALUE\020\007\022\027\n\023GET_REGISTER_VALUES\020\010\022\027\n\023S"
    "ET_REGISTER_VALUES\020\t\022\021\n\rLOAD_FIRMWARE\020\n\022"
    "\032\n\026LOAD_FIRMWARE_BLOCKING\020\013\"/\n\nDeviceTyp"
    "e\022\t\n\005BOARD\020\001\022\n\n\006FPGA_1\020\002\022\n\n\006FPGA_2\020\003\"E\n\014"
    "RegisterType\022\n\n\006SENSOR\020\001\022\022\n\016BOARD_REGIST"
    "ER\020\002\022\025\n\021FIRMWARE_REGISTER\020\003\"Q\n\tBoardMake"
    "\022\r\n\tTPM_BOARD\020\001\022\017\n\013ROACH_BAORD\020\002\022\020\n\014ROAC"
    "H2_BOARD\020\003\022\022\n\016UNIBOARD_BOARD\020\004\"\305\007\n\005Reply"
    "\022!\n\006result\030\001 \002(\0162\021.Reply.ResultType\022)\n\np"
    "ermission\030\002 \001(\0162\025.Reply.PermissionType\022 "
    "\n\006status\030\003 \001(\0162\020.Reply.TpmStatus\022\r\n\005valu"
    "e\030\004 \001(\r\022\016\n\006values\030\005 \003(\r\022-\n\014registerList\030"
    "\006 \003(\0132\027.Reply.RegisterInfoType\022\017\n\007messag"
    "e\030\007 \001(\t\022\n\n\002id\030\010 \001(\005\022\020\n\010firmware\030\t \003(\t\032\321\001"
    "\n\020RegisterInfoType\022\014\n\004name\030\001 \002(\t\022!\n\004type"
    "\030\002 \002(\0162\023.Reply.RegisterType\022!\n\006device\030\003 "
    "\002(\0162\021.Reply.DeviceType\022)\n\npermission\030\004 \002"
    "(\0162\025.Reply.PermissionType\022\014\n\004size\030\005 \002(\r\022"
    "\023\n\013description\030\006 \002(\t\022\r\n\005value\030\007 \002(\r\022\014\n\004b"
    "its\030\010 \002(\r\032=\n\013SPIInfoType\022\014\n\004name\030\001 \002(\t\022\020"
    "\n\010spi_sclk\030\002 \002(\r\022\016\n\006spi_en\030\003 \002(\r\"M\n\nResu"
    "ltType\022\013\n\007SUCCESS\020\000\022\024\n\007FAILURE\020\377\377\377\377\377\377\377\377\377"
    "\001\022\034\n\017NOT_IMPLEMENTED\020\376\377\377\377\377\377\377\377\377\001\"\237\001\n\tTpmS"
    "tatus\022\006\n\002OK\020\000\022\035\n\020LOADING_FIRMWARE\020\377\377\377\377\377\377"
    "\377\377\377\001\022\031\n\014CONFIG_ERROR\020\376\377\377\377\377\377\377\377\377\001\022\030\n\013BOARD"
    "_ERROR\020\375\377\377\377\377\377\377\377\377\001\022\032\n\rNOT_CONNECTED\020\374\377\377\377\377"
    "\377\377\377\377\001\022\032\n\rNETWORK_ERROR\020\373\377\377\377\377\377\377\377\377\001\"4\n\016Per"
    "missionType\022\010\n\004READ\020\001\022\t\n\005WRITE\020\002\022\r\n\tREAD"
    "WRITE\020\003\"/\n\nDeviceType\022\t\n\005BOARD\020\001\022\n\n\006FPGA"
    "_1\020\002\022\n\n\006FPGA_2\020\004\"d\n\014RegisterType\022\n\n\006SENS"
    "OR\020\001\022\022\n\016BOARD_REGISTER\020\002\022\025\n\021FIRMWARE_REG"
    "ISTER\020\003\022\016\n\nSPI_DEVICE\020\004\022\r\n\tCOMPONENT\020\005", 1718);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Reply::default_instance_ = new Reply();
  Reply_RegisterInfoType::default_instance_ = new Reply_RegisterInfoType();
  Reply_SPIInfoType::default_instance_ = new Reply_SPIInfoType();
  Request::default_instance_->InitAsDefaultInstance();
  Reply::default_instance_->InitAsDefaultInstance();
  Reply_RegisterInfoType::default_instance_->InitAsDefaultInstance();
  Reply_SPIInfoType::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Request_CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_CommandType_descriptor_;
}
bool Request_CommandType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_CommandType Request::CONNECT;
const Request_CommandType Request::DISCONNECT;
const Request_CommandType Request::RESET_BOARD;
const Request_CommandType Request::GET_STATUS;
const Request_CommandType Request::GET_REGISTER_LIST;
const Request_CommandType Request::GET_REGISTER_VALUE;
const Request_CommandType Request::SET_REGISTER_VALUE;
const Request_CommandType Request::GET_REGISTER_VALUES;
const Request_CommandType Request::SET_REGISTER_VALUES;
const Request_CommandType Request::LOAD_FIRMWARE;
const Request_CommandType Request::LOAD_FIRMWARE_BLOCKING;
const Request_CommandType Request::CommandType_MIN;
const Request_CommandType Request::CommandType_MAX;
const int Request::CommandType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Request_DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_DeviceType_descriptor_;
}
bool Request_DeviceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_DeviceType Request::BOARD;
const Request_DeviceType Request::FPGA_1;
const Request_DeviceType Request::FPGA_2;
const Request_DeviceType Request::DeviceType_MIN;
const Request_DeviceType Request::DeviceType_MAX;
const int Request::DeviceType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Request_RegisterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_RegisterType_descriptor_;
}
bool Request_RegisterType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_RegisterType Request::SENSOR;
const Request_RegisterType Request::BOARD_REGISTER;
const Request_RegisterType Request::FIRMWARE_REGISTER;
const Request_RegisterType Request::RegisterType_MIN;
const Request_RegisterType Request::RegisterType_MAX;
const int Request::RegisterType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Request_BoardMake_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_BoardMake_descriptor_;
}
bool Request_BoardMake_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_BoardMake Request::TPM_BOARD;
const Request_BoardMake Request::ROACH_BAORD;
const Request_BoardMake Request::ROACH2_BOARD;
const Request_BoardMake Request::UNIBOARD_BOARD;
const Request_BoardMake Request::BoardMake_MIN;
const Request_BoardMake Request::BoardMake_MAX;
const int Request::BoardMake_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Request::kCommandFieldNumber;
const int Request::kIpFieldNumber;
const int Request::kPortFieldNumber;
const int Request::kIdFieldNumber;
const int Request::kRegisterNameFieldNumber;
const int Request::kRegisterFamilyFieldNumber;
const int Request::kDeviceFieldNumber;
const int Request::kNFieldNumber;
const int Request::kFileFieldNumber;
const int Request::kValueFieldNumber;
const int Request::kValuesFieldNumber;
const int Request::kBoardFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request)
}

void Request::InitAsDefaultInstance() {
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Request)
}

void Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  command_ = 1;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  id_ = 0;
  registername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  registerfamily_ = 1;
  device_ = 1;
  n_ = 0u;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0u;
  board_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (registername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete registername_;
  }
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_;
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    command_ = 1;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0;
    id_ = 0;
    if (has_registername()) {
      if (registername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        registername_->clear();
      }
    }
    registerfamily_ = 1;
    device_ = 1;
    n_ = 0u;
  }
  if (_has_bits_[8 / 32] & 2816) {
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_->clear();
      }
    }
    value_ = 0u;
    board_ = 1;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Request.CommandType command = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Request_CommandType_IsValid(value)) {
            set_command(static_cast< ::Request_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional int32 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_registerName;
        break;
      }

      // optional string registerName = 6;
      case 6: {
        if (tag == 50) {
         parse_registerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_registername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->registername().data(), this->registername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "registername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_registerFamily;
        break;
      }

      // optional .Request.RegisterType registerFamily = 7;
      case 7: {
        if (tag == 56) {
         parse_registerFamily:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Request_RegisterType_IsValid(value)) {
            set_registerfamily(static_cast< ::Request_RegisterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_device;
        break;
      }

      // optional .Request.DeviceType device = 8;
      case 8: {
        if (tag == 64) {
         parse_device:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Request_DeviceType_IsValid(value)) {
            set_device(static_cast< ::Request_DeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_n;
        break;
      }

      // optional uint32 n = 9;
      case 9: {
        if (tag == 72) {
         parse_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_)));
          set_has_n();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_file;
        break;
      }

      // optional string file = 10;
      case 10: {
        if (tag == 82) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_value;
        break;
      }

      // optional uint32 value = 11;
      case 11: {
        if (tag == 88) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_values;
        break;
      }

      // repeated uint32 values = 12;
      case 12: {
        if (tag == 96) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_values())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_values;
        if (input->ExpectTag(104)) goto parse_board;
        break;
      }

      // optional .Request.BoardMake board = 13;
      case 13: {
        if (tag == 104) {
         parse_board:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Request_BoardMake_IsValid(value)) {
            set_board(static_cast< ::Request_BoardMake >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Request)
  // required .Request.CommandType command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional int32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  // optional string registerName = 6;
  if (has_registername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->registername().data(), this->registername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "registername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->registername(), output);
  }

  // optional .Request.RegisterType registerFamily = 7;
  if (has_registerfamily()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->registerfamily(), output);
  }

  // optional .Request.DeviceType device = 8;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->device(), output);
  }

  // optional uint32 n = 9;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->n(), output);
  }

  // optional string file = 10;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->file(), output);
  }

  // optional uint32 value = 11;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->value(), output);
  }

  // repeated uint32 values = 12;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->values(i), output);
  }

  // optional .Request.BoardMake board = 13;
  if (has_board()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->board(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request)
  // required .Request.CommandType command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional int32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }

  // optional string registerName = 6;
  if (has_registername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->registername().data(), this->registername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "registername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->registername(), target);
  }

  // optional .Request.RegisterType registerFamily = 7;
  if (has_registerfamily()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->registerfamily(), target);
  }

  // optional .Request.DeviceType device = 8;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->device(), target);
  }

  // optional uint32 n = 9;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->n(), target);
  }

  // optional string file = 10;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->file(), target);
  }

  // optional uint32 value = 11;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->value(), target);
  }

  // repeated uint32 values = 12;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->values(i), target);
  }

  // optional .Request.BoardMake board = 13;
  if (has_board()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->board(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Request.CommandType command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string registerName = 6;
    if (has_registername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->registername());
    }

    // optional .Request.RegisterType registerFamily = 7;
    if (has_registerfamily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->registerfamily());
    }

    // optional .Request.DeviceType device = 8;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device());
    }

    // optional uint32 n = 9;
    if (has_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string file = 10;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }

    // optional uint32 value = 11;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional .Request.BoardMake board = 13;
    if (has_board()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->board());
    }

  }
  // repeated uint32 values = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_registername()) {
      set_registername(from.registername());
    }
    if (from.has_registerfamily()) {
      set_registerfamily(from.registerfamily());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_n()) {
      set_n(from.n());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_board()) {
      set_board(from.board());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(id_, other->id_);
    std::swap(registername_, other->registername_);
    std::swap(registerfamily_, other->registerfamily_);
    std::swap(device_, other->device_);
    std::swap(n_, other->n_);
    std::swap(file_, other->file_);
    std::swap(value_, other->value_);
    values_.Swap(&other->values_);
    std::swap(board_, other->board_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Reply_ResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_ResultType_descriptor_;
}
bool Reply_ResultType_IsValid(int value) {
  switch(value) {
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Reply_ResultType Reply::SUCCESS;
const Reply_ResultType Reply::FAILURE;
const Reply_ResultType Reply::NOT_IMPLEMENTED;
const Reply_ResultType Reply::ResultType_MIN;
const Reply_ResultType Reply::ResultType_MAX;
const int Reply::ResultType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Reply_TpmStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_TpmStatus_descriptor_;
}
bool Reply_TpmStatus_IsValid(int value) {
  switch(value) {
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Reply_TpmStatus Reply::OK;
const Reply_TpmStatus Reply::LOADING_FIRMWARE;
const Reply_TpmStatus Reply::CONFIG_ERROR;
const Reply_TpmStatus Reply::BOARD_ERROR;
const Reply_TpmStatus Reply::NOT_CONNECTED;
const Reply_TpmStatus Reply::NETWORK_ERROR;
const Reply_TpmStatus Reply::TpmStatus_MIN;
const Reply_TpmStatus Reply::TpmStatus_MAX;
const int Reply::TpmStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Reply_PermissionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_PermissionType_descriptor_;
}
bool Reply_PermissionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Reply_PermissionType Reply::READ;
const Reply_PermissionType Reply::WRITE;
const Reply_PermissionType Reply::READWRITE;
const Reply_PermissionType Reply::PermissionType_MIN;
const Reply_PermissionType Reply::PermissionType_MAX;
const int Reply::PermissionType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Reply_DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_DeviceType_descriptor_;
}
bool Reply_DeviceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Reply_DeviceType Reply::BOARD;
const Reply_DeviceType Reply::FPGA_1;
const Reply_DeviceType Reply::FPGA_2;
const Reply_DeviceType Reply::DeviceType_MIN;
const Reply_DeviceType Reply::DeviceType_MAX;
const int Reply::DeviceType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Reply_RegisterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_RegisterType_descriptor_;
}
bool Reply_RegisterType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Reply_RegisterType Reply::SENSOR;
const Reply_RegisterType Reply::BOARD_REGISTER;
const Reply_RegisterType Reply::FIRMWARE_REGISTER;
const Reply_RegisterType Reply::SPI_DEVICE;
const Reply_RegisterType Reply::COMPONENT;
const Reply_RegisterType Reply::RegisterType_MIN;
const Reply_RegisterType Reply::RegisterType_MAX;
const int Reply::RegisterType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Reply_RegisterInfoType::kNameFieldNumber;
const int Reply_RegisterInfoType::kTypeFieldNumber;
const int Reply_RegisterInfoType::kDeviceFieldNumber;
const int Reply_RegisterInfoType::kPermissionFieldNumber;
const int Reply_RegisterInfoType::kSizeFieldNumber;
const int Reply_RegisterInfoType::kDescriptionFieldNumber;
const int Reply_RegisterInfoType::kValueFieldNumber;
const int Reply_RegisterInfoType::kBitsFieldNumber;
#endif  // !_MSC_VER

Reply_RegisterInfoType::Reply_RegisterInfoType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Reply.RegisterInfoType)
}

void Reply_RegisterInfoType::InitAsDefaultInstance() {
}

Reply_RegisterInfoType::Reply_RegisterInfoType(const Reply_RegisterInfoType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Reply.RegisterInfoType)
}

void Reply_RegisterInfoType::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  device_ = 1;
  permission_ = 1;
  size_ = 0u;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0u;
  bits_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply_RegisterInfoType::~Reply_RegisterInfoType() {
  // @@protoc_insertion_point(destructor:Reply.RegisterInfoType)
  SharedDtor();
}

void Reply_RegisterInfoType::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void Reply_RegisterInfoType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_RegisterInfoType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_RegisterInfoType_descriptor_;
}

const Reply_RegisterInfoType& Reply_RegisterInfoType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Reply_RegisterInfoType* Reply_RegisterInfoType::default_instance_ = NULL;

Reply_RegisterInfoType* Reply_RegisterInfoType::New() const {
  return new Reply_RegisterInfoType;
}

void Reply_RegisterInfoType::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Reply_RegisterInfoType*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(value_, bits_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 1;
    device_ = 1;
    permission_ = 1;
    size_ = 0u;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply_RegisterInfoType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Reply.RegisterInfoType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Reply.RegisterType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Reply_RegisterType_IsValid(value)) {
            set_type(static_cast< ::Reply_RegisterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_device;
        break;
      }

      // required .Reply.DeviceType device = 3;
      case 3: {
        if (tag == 24) {
         parse_device:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Reply_DeviceType_IsValid(value)) {
            set_device(static_cast< ::Reply_DeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_permission;
        break;
      }

      // required .Reply.PermissionType permission = 4;
      case 4: {
        if (tag == 32) {
         parse_permission:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Reply_PermissionType_IsValid(value)) {
            set_permission(static_cast< ::Reply_PermissionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_size;
        break;
      }

      // required uint32 size = 5;
      case 5: {
        if (tag == 40) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_description;
        break;
      }

      // required string description = 6;
      case 6: {
        if (tag == 50) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_value;
        break;
      }

      // required uint32 value = 7;
      case 7: {
        if (tag == 56) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bits;
        break;
      }

      // required uint32 bits = 8;
      case 8: {
        if (tag == 64) {
         parse_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bits_)));
          set_has_bits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Reply.RegisterInfoType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Reply.RegisterInfoType)
  return false;
#undef DO_
}

void Reply_RegisterInfoType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Reply.RegisterInfoType)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .Reply.RegisterType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required .Reply.DeviceType device = 3;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->device(), output);
  }

  // required .Reply.PermissionType permission = 4;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->permission(), output);
  }

  // required uint32 size = 5;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->size(), output);
  }

  // required string description = 6;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  // required uint32 value = 7;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->value(), output);
  }

  // required uint32 bits = 8;
  if (has_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bits(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Reply.RegisterInfoType)
}

::google::protobuf::uint8* Reply_RegisterInfoType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Reply.RegisterInfoType)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .Reply.RegisterType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required .Reply.DeviceType device = 3;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->device(), target);
  }

  // required .Reply.PermissionType permission = 4;
  if (has_permission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->permission(), target);
  }

  // required uint32 size = 5;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->size(), target);
  }

  // required string description = 6;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  // required uint32 value = 7;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->value(), target);
  }

  // required uint32 bits = 8;
  if (has_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bits(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Reply.RegisterInfoType)
  return target;
}

int Reply_RegisterInfoType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .Reply.RegisterType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .Reply.DeviceType device = 3;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device());
    }

    // required .Reply.PermissionType permission = 4;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->permission());
    }

    // required uint32 size = 5;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // required string description = 6;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // required uint32 value = 7;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // required uint32 bits = 8;
    if (has_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bits());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_RegisterInfoType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply_RegisterInfoType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply_RegisterInfoType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply_RegisterInfoType::MergeFrom(const Reply_RegisterInfoType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_permission()) {
      set_permission(from.permission());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_bits()) {
      set_bits(from.bits());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply_RegisterInfoType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_RegisterInfoType::CopyFrom(const Reply_RegisterInfoType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_RegisterInfoType::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void Reply_RegisterInfoType::Swap(Reply_RegisterInfoType* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(device_, other->device_);
    std::swap(permission_, other->permission_);
    std::swap(size_, other->size_);
    std::swap(description_, other->description_);
    std::swap(value_, other->value_);
    std::swap(bits_, other->bits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply_RegisterInfoType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_RegisterInfoType_descriptor_;
  metadata.reflection = Reply_RegisterInfoType_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Reply_SPIInfoType::kNameFieldNumber;
const int Reply_SPIInfoType::kSpiSclkFieldNumber;
const int Reply_SPIInfoType::kSpiEnFieldNumber;
#endif  // !_MSC_VER

Reply_SPIInfoType::Reply_SPIInfoType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Reply.SPIInfoType)
}

void Reply_SPIInfoType::InitAsDefaultInstance() {
}

Reply_SPIInfoType::Reply_SPIInfoType(const Reply_SPIInfoType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Reply.SPIInfoType)
}

void Reply_SPIInfoType::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spi_sclk_ = 0u;
  spi_en_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply_SPIInfoType::~Reply_SPIInfoType() {
  // @@protoc_insertion_point(destructor:Reply.SPIInfoType)
  SharedDtor();
}

void Reply_SPIInfoType::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Reply_SPIInfoType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_SPIInfoType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_SPIInfoType_descriptor_;
}

const Reply_SPIInfoType& Reply_SPIInfoType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Reply_SPIInfoType* Reply_SPIInfoType::default_instance_ = NULL;

Reply_SPIInfoType* Reply_SPIInfoType::New() const {
  return new Reply_SPIInfoType;
}

void Reply_SPIInfoType::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Reply_SPIInfoType*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(spi_sclk_, spi_en_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply_SPIInfoType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Reply.SPIInfoType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_spi_sclk;
        break;
      }

      // required uint32 spi_sclk = 2;
      case 2: {
        if (tag == 16) {
         parse_spi_sclk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spi_sclk_)));
          set_has_spi_sclk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_spi_en;
        break;
      }

      // required uint32 spi_en = 3;
      case 3: {
        if (tag == 24) {
         parse_spi_en:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spi_en_)));
          set_has_spi_en();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Reply.SPIInfoType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Reply.SPIInfoType)
  return false;
#undef DO_
}

void Reply_SPIInfoType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Reply.SPIInfoType)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 spi_sclk = 2;
  if (has_spi_sclk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->spi_sclk(), output);
  }

  // required uint32 spi_en = 3;
  if (has_spi_en()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->spi_en(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Reply.SPIInfoType)
}

::google::protobuf::uint8* Reply_SPIInfoType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Reply.SPIInfoType)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 spi_sclk = 2;
  if (has_spi_sclk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->spi_sclk(), target);
  }

  // required uint32 spi_en = 3;
  if (has_spi_en()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->spi_en(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Reply.SPIInfoType)
  return target;
}

int Reply_SPIInfoType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 spi_sclk = 2;
    if (has_spi_sclk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spi_sclk());
    }

    // required uint32 spi_en = 3;
    if (has_spi_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spi_en());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_SPIInfoType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply_SPIInfoType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply_SPIInfoType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply_SPIInfoType::MergeFrom(const Reply_SPIInfoType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_spi_sclk()) {
      set_spi_sclk(from.spi_sclk());
    }
    if (from.has_spi_en()) {
      set_spi_en(from.spi_en());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply_SPIInfoType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_SPIInfoType::CopyFrom(const Reply_SPIInfoType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_SPIInfoType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Reply_SPIInfoType::Swap(Reply_SPIInfoType* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(spi_sclk_, other->spi_sclk_);
    std::swap(spi_en_, other->spi_en_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply_SPIInfoType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_SPIInfoType_descriptor_;
  metadata.reflection = Reply_SPIInfoType_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Reply::kResultFieldNumber;
const int Reply::kPermissionFieldNumber;
const int Reply::kStatusFieldNumber;
const int Reply::kValueFieldNumber;
const int Reply::kValuesFieldNumber;
const int Reply::kRegisterListFieldNumber;
const int Reply::kMessageFieldNumber;
const int Reply::kIdFieldNumber;
const int Reply::kFirmwareFieldNumber;
#endif  // !_MSC_VER

Reply::Reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Reply)
}

void Reply::InitAsDefaultInstance() {
}

Reply::Reply(const Reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Reply)
}

void Reply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  permission_ = 1;
  status_ = 0;
  value_ = 0u;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:Reply)
  SharedDtor();
}

void Reply::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void Reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_descriptor_;
}

const Reply& Reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Reply* Reply::default_instance_ = NULL;

Reply* Reply::New() const {
  return new Reply;
}

void Reply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Reply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 207) {
    ZR_(status_, value_);
    result_ = 0;
    permission_ = 1;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    id_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  values_.Clear();
  registerlist_.Clear();
  firmware_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Reply.ResultType result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Reply_ResultType_IsValid(value)) {
            set_result(static_cast< ::Reply_ResultType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_permission;
        break;
      }

      // optional .Reply.PermissionType permission = 2;
      case 2: {
        if (tag == 16) {
         parse_permission:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Reply_PermissionType_IsValid(value)) {
            set_permission(static_cast< ::Reply_PermissionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .Reply.TpmStatus status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Reply_TpmStatus_IsValid(value)) {
            set_status(static_cast< ::Reply_TpmStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional uint32 value = 4;
      case 4: {
        if (tag == 32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_values;
        break;
      }

      // repeated uint32 values = 5;
      case 5: {
        if (tag == 40) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_values())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_values;
        if (input->ExpectTag(50)) goto parse_registerList;
        break;
      }

      // repeated .Reply.RegisterInfoType registerList = 6;
      case 6: {
        if (tag == 50) {
         parse_registerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_registerlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_registerList;
        if (input->ExpectTag(58)) goto parse_message;
        break;
      }

      // optional string message = 7;
      case 7: {
        if (tag == 58) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_id;
        break;
      }

      // optional int32 id = 8;
      case 8: {
        if (tag == 64) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_firmware;
        break;
      }

      // repeated string firmware = 9;
      case 9: {
        if (tag == 74) {
         parse_firmware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_firmware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firmware(this->firmware_size() - 1).data(),
            this->firmware(this->firmware_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "firmware");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_firmware;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Reply)
  return false;
#undef DO_
}

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Reply)
  // required .Reply.ResultType result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .Reply.PermissionType permission = 2;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->permission(), output);
  }

  // optional .Reply.TpmStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional uint32 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->value(), output);
  }

  // repeated uint32 values = 5;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->values(i), output);
  }

  // repeated .Reply.RegisterInfoType registerList = 6;
  for (int i = 0; i < this->registerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->registerlist(i), output);
  }

  // optional string message = 7;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->message(), output);
  }

  // optional int32 id = 8;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->id(), output);
  }

  // repeated string firmware = 9;
  for (int i = 0; i < this->firmware_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->firmware(i).data(), this->firmware(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "firmware");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->firmware(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Reply)
}

::google::protobuf::uint8* Reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Reply)
  // required .Reply.ResultType result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .Reply.PermissionType permission = 2;
  if (has_permission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->permission(), target);
  }

  // optional .Reply.TpmStatus status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional uint32 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->value(), target);
  }

  // repeated uint32 values = 5;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->values(i), target);
  }

  // repeated .Reply.RegisterInfoType registerList = 6;
  for (int i = 0; i < this->registerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->registerlist(i), target);
  }

  // optional string message = 7;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->message(), target);
  }

  // optional int32 id = 8;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->id(), target);
  }

  // repeated string firmware = 9;
  for (int i = 0; i < this->firmware_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firmware(i).data(), this->firmware(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firmware");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->firmware(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Reply)
  return target;
}

int Reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Reply.ResultType result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .Reply.PermissionType permission = 2;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->permission());
    }

    // optional .Reply.TpmStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional string message = 7;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int32 id = 8;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated uint32 values = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  // repeated .Reply.RegisterInfoType registerList = 6;
  total_size += 1 * this->registerlist_size();
  for (int i = 0; i < this->registerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->registerlist(i));
  }

  // repeated string firmware = 9;
  total_size += 1 * this->firmware_size();
  for (int i = 0; i < this->firmware_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->firmware(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  registerlist_.MergeFrom(from.registerlist_);
  firmware_.MergeFrom(from.firmware_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_permission()) {
      set_permission(from.permission());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->registerlist())) return false;
  return true;
}

void Reply::Swap(Reply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(permission_, other->permission_);
    std::swap(status_, other->status_);
    std::swap(value_, other->value_);
    values_.Swap(&other->values_);
    registerlist_.Swap(&other->registerlist_);
    std::swap(message_, other->message_);
    std::swap(id_, other->id_);
    firmware_.Swap(&other->firmware_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_descriptor_;
  metadata.reflection = Reply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
